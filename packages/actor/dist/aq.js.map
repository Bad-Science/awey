{
  "version": 3,
  "sources": ["../aq.ts"],
  "sourcesContent": ["type QueueItem<ArgsType extends any[], RetType> = {\n  func: (...args: ArgsType) => Promise<RetType> | RetType;\n  args: ArgsType\n  next: QueueItem<any[], any> | null;\n  resolve: (result: RetType | PromiseLike<RetType>) => void;\n  reject: (reason?: any) => void;\n}\n\nexport class AsyncQueue {\n  private head: QueueItem<any[], any> | null = null;\n  private tail: QueueItem<any[], any> | null = null;\n  private _size = 0;\n\n  public get size() {\n    return this._size;\n  }\n\n  public enqueue<ArgsType extends any[], RetType>(func: (...args: ArgsType) => Promise<RetType> | RetType, args: ArgsType): Promise<RetType> {\n    return new Promise<RetType>((resolve, reject) => {\n      const item = {func, args, next: null, resolve, reject};\n      // if (!this.head) {\n      //   this.head = item;\n      //   this.tail = item;\n      //   this.runNext();\n      // } else {\n      //   this.tail.next = item;\n      //   this.tail = item;\n      // }\n      ++this._size;\n      if (this.head) {\n        let tail = this.head;\n        while (tail.next) tail = tail.next;\n        tail.next = item;\n      } else {\n        this.head = item;\n        this.runNext();\n      }\n    });\n  }\n\n  private async runNext() {\n    if (!this.head) return;\n    try {\n      const result = await this.head.func(...this.head.args)\n      this.head.resolve(result);\n    } catch (e) {\n      this.head.reject(e);\n    } finally {\n      this.head = this.head.next;\n      --this._size;\n      if (this.head) await this.runNext();\n    }\n  }\n}\n\nfunction arraysEqual<T>(a: T[], b: T[]): boolean {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\n\nasync function runTest() {\n  const q = new AsyncQueue();\n\n  async function testAsync(arg1: string, arg2: number) {\n    console.log(arg1, arg2)\n  }\n\n  q.enqueue(testAsync, [\"hello\", 42])\n\n  const testResults: number[] = [];\n\n  const prom = (arg: number) =>( new Promise<number>((res, rej) => {\n    console.log(arg);\n    setTimeout(() => {\n      // testResults.push(arg);\n      res(arg);\n      console.log(arg);\n    }, Math.random() * 10)\n  }));\n\n  const len = 200\n  const interrupter = () => {\n    if (testResults.length >= len) {\n      console.log(\"DONE!\", arraysEqual(Array.from(testResults), Array.from(testResults.sort((a, b) => a - b))))\n      console.log(testResults)\n    } else setTimeout(_=>interrupter(), 0);\n  }\n  interrupter();\n\n  // Promise.all(\n  //   [...new Array(len).keys()].map((val) => {\n  //     return q.enqueue(async (arg) => {\n  //       // console.log(arg);\n  //       const x = 1 * 100;\n  //       const y = x + 2\n  //       setTimeout(_=>_,0)\n  //       testResults.push(arg);\n  //       setTimeout(_=>_,0);\n  //       return  await prom(arg)\n  //     }, [val]).then(result => testResults.push(result));\n  //   })\n  // ).then(results => {\n  //   console.log(results == results.sort(), results.length)\n  // })\n\n  const arr = [...new Array(len).keys()];\n  for (const val of arr) {\n    q.enqueue(async (arg) => {\n      console.log(arg, q.size);\n      const x = 1 * 100;\n      const y = x + 2\n      setTimeout(_=>_,0)\n      testResults.push(arg);\n      setTimeout(_=>_,0);\n      return arg;\n      //  return  prom(arg)\n    }, [val]).then();\n  }\n  console.log(q.size)\n  // await new Promise(res => setTimeout(res, 1000));\n  // for (const val of arr.slice(len / 2)) {\n  //   q.enqueue(async (arg) => {\n  //     console.log(arg, q.size);\n  //     const x = 1 * 100;\n  //     const y = x + 2\n  //     setTimeout(_=>_,0)\n  //     testResults.push(arg);\n  //     setTimeout(_=>_,0);\n  //     return arg;\n  //     //  return  prom(arg)\n  //   }, [val]).then();\n  // }\n  console.log(q.size)\n}\n\nrunTest();"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQO,MAAM,WAAW;AAAA,EACd,OAAqC;AAAA,EACrC,OAAqC;AAAA,EACrC,QAAQ;AAAA,EAEhB,IAAW,OAAO;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,QAAyC,MAAyD,MAAkC;AACzI,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,YAAM,OAAO,EAAC,MAAM,MAAM,MAAM,MAAM,SAAS,OAAM;AASrD,QAAE,KAAK;AACP,UAAI,KAAK,MAAM;AACb,YAAI,OAAO,KAAK;AAChB,eAAO,KAAK;AAAM,iBAAO,KAAK;AAC9B,aAAK,OAAO;AAAA,MACd,OAAO;AACL,aAAK,OAAO;AACZ,aAAK,QAAQ;AAAA,MACf;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,UAAU;AACtB,QAAI,CAAC,KAAK;AAAM;AAChB,QAAI;AACF,YAAM,SAAS,MAAM,KAAK,KAAK,KAAK,GAAG,KAAK,KAAK,IAAI;AACrD,WAAK,KAAK,QAAQ,MAAM;AAAA,IAC1B,SAAS,GAAG;AACV,WAAK,KAAK,OAAO,CAAC;AAAA,IACpB,UAAE;AACA,WAAK,OAAO,KAAK,KAAK;AACtB,QAAE,KAAK;AACP,UAAI,KAAK;AAAM,cAAM,KAAK,QAAQ;AAAA,IACpC;AAAA,EACF;AACF;AAEA,SAAS,YAAe,GAAQ,GAAiB;AAC/C,MAAI,EAAE,WAAW,EAAE;AAAQ,WAAO;AAClC,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,QAAI,EAAE,CAAC,MAAM,EAAE,CAAC;AAAG,aAAO;AAAA,EAC5B;AACA,SAAO;AACT;AAEA,eAAe,UAAU;AACvB,QAAM,IAAI,IAAI,WAAW;AAEzB,iBAAe,UAAU,MAAc,MAAc;AACnD,YAAQ,IAAI,MAAM,IAAI;AAAA,EACxB;AAEA,IAAE,QAAQ,WAAW,CAAC,SAAS,EAAE,CAAC;AAElC,QAAM,cAAwB,CAAC;AAE/B,QAAM,OAAO,CAAC,QAAiB,IAAI,QAAgB,CAAC,KAAK,QAAQ;AAC/D,YAAQ,IAAI,GAAG;AACf,eAAW,MAAM;AAEf,UAAI,GAAG;AACP,cAAQ,IAAI,GAAG;AAAA,IACjB,GAAG,KAAK,OAAO,IAAI,EAAE;AAAA,EACvB,CAAC;AAED,QAAM,MAAM;AACZ,QAAM,cAAc,MAAM;AACxB,QAAI,YAAY,UAAU,KAAK;AAC7B,cAAQ,IAAI,SAAS,YAAY,MAAM,KAAK,WAAW,GAAG,MAAM,KAAK,YAAY,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;AACxG,cAAQ,IAAI,WAAW;AAAA,IACzB;AAAO,iBAAW,OAAG,YAAY,GAAG,CAAC;AAAA,EACvC;AACA,cAAY;AAkBZ,QAAM,MAAM,CAAC,GAAG,IAAI,MAAM,GAAG,EAAE,KAAK,CAAC;AACrC,aAAW,OAAO,KAAK;AACrB,MAAE,QAAQ,OAAO,QAAQ;AACvB,cAAQ,IAAI,KAAK,EAAE,IAAI;AACvB,YAAM,IAAI,IAAI;AACd,YAAM,IAAI,IAAI;AACd,iBAAW,OAAG,GAAE,CAAC;AACjB,kBAAY,KAAK,GAAG;AACpB,iBAAW,OAAG,GAAE,CAAC;AACjB,aAAO;AAAA,IAET,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK;AAAA,EACjB;AACA,UAAQ,IAAI,EAAE,IAAI;AAclB,UAAQ,IAAI,EAAE,IAAI;AACpB;AAEA,QAAQ;",
  "names": []
}

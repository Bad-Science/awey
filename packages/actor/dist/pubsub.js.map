{
  "version": 3,
  "sources": ["../pubsub.ts"],
  "sourcesContent": ["\ntype StringKeysOnly<T> = {\n  [K in string]: T;\n};\ntype PubSubEvents = StringKeysOnly<{\n  [event: string]: unknown;\n}>\n// type PubSubDef = { [event: string]: unknown };\n\n\ntype PSEvent<T> = keyof T & string\ntype Pub<T> = <E extends PSEvent<T>>(event: E, message: T[E]) => void;\ntype Sub<T> = <E extends PSEvent<T>>(event: E, cb: (message: T[E]) => void) => Symbol;\ntype Unsub = (token: Symbol) => boolean;\n\nexport interface PubSub<T extends PubSubEvents> {\n  pub: Pub<T>\n  sub: Sub<T>\n  unsub: Unsub;\n}\n\nexport abstract class PubSubBase<T extends PubSubEvents> implements PubSub<T> {\n  protected readonly subMap: Map<PSEvent<T>, Map<Symbol, (message: unknown) => void>> = new Map();\n  // protected readonly topic: string;\n  // protected constructor (topic: string) { }\n\n  abstract pub: Pub<T>;\n\n  sub: Sub<T> = (event, cb) => {\n    const handle = Symbol(event);\n    const entry = [handle, cb] satisfies [Symbol, (m: unknown) => void];\n    if (!this.subMap.has(event)) {\n      this.subMap.set(event, new Map());\n    }\n    this.subMap.get(event)!.set(...entry);\n    return handle;\n  }\n\n  unsub: Unsub = (handle) => {\n    for (let [_event, handlers] of this.subMap.entries()) {\n      if (handlers.delete(handle)) return true;\n    }\n    return false;\n  }\n\n  protected propagate = (event: PSEvent<T>, message: T[typeof event]) => {\n    const handlers = this.subMap.get(event);\n    if (!handlers) return 0;\n    for (let [_, cb] of handlers) {\n      cb(message);\n    }\n    return handlers.size;\n  }\n}\n\nexport class ProcessPubSub<T extends PubSubEvents> extends PubSubBase<T> {\n  private readonly channel: BroadcastChannel;\n\n  constructor (topic: string) {\n    super();\n    this.channel = new BroadcastChannel(topic);\n    this.channel.addEventListener('message', (rawEvent) => {\n      const { event, message } = rawEvent.data;\n      this.propagate(event, message);\n    });\n  }\n\n  pub: Pub<T> = (event, message) => {\n    this.channel.postMessage({ event, message });\n  }\n\n  close = () => {\n    this.channel.close();\n    // this.subMap.clear();\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBO,MAAe,WAAwD;AAAA,EACzD,SAAmE,oBAAI,IAAI;AAAA,EAM9F,MAAc,CAAC,OAAO,OAAO;AAC3B,UAAM,SAAS,OAAO,KAAK;AAC3B,UAAM,QAAQ,CAAC,QAAQ,EAAE;AACzB,QAAI,CAAC,KAAK,OAAO,IAAI,KAAK,GAAG;AAC3B,WAAK,OAAO,IAAI,OAAO,oBAAI,IAAI,CAAC;AAAA,IAClC;AACA,SAAK,OAAO,IAAI,KAAK,EAAG,IAAI,GAAG,KAAK;AACpC,WAAO;AAAA,EACT;AAAA,EAEA,QAAe,CAAC,WAAW;AACzB,aAAS,CAAC,QAAQ,QAAQ,KAAK,KAAK,OAAO,QAAQ,GAAG;AACpD,UAAI,SAAS,OAAO,MAAM;AAAG,eAAO;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAAA,EAEU,YAAY,CAAC,OAAmB,YAA6B;AACrE,UAAM,WAAW,KAAK,OAAO,IAAI,KAAK;AACtC,QAAI,CAAC;AAAU,aAAO;AACtB,aAAS,CAAC,GAAG,EAAE,KAAK,UAAU;AAC5B,SAAG,OAAO;AAAA,IACZ;AACA,WAAO,SAAS;AAAA,EAClB;AACF;AAEO,MAAM,sBAA8C,WAAc;AAAA,EACtD;AAAA,EAEjB,YAAa,OAAe;AAC1B,UAAM;AACN,SAAK,UAAU,IAAI,iBAAiB,KAAK;AACzC,SAAK,QAAQ,iBAAiB,WAAW,CAAC,aAAa;AACrD,YAAM,EAAE,OAAO,QAAQ,IAAI,SAAS;AACpC,WAAK,UAAU,OAAO,OAAO;AAAA,IAC/B,CAAC;AAAA,EACH;AAAA,EAEA,MAAc,CAAC,OAAO,YAAY;AAChC,SAAK,QAAQ,YAAY,EAAE,OAAO,QAAQ,CAAC;AAAA,EAC7C;AAAA,EAEA,QAAQ,MAAM;AACZ,SAAK,QAAQ,MAAM;AAAA,EAErB;AACF;AAAC;",
  "names": []
}
